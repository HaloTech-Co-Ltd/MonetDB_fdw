-- !!! If you want to run regression tests, you need to create a database named "test" in MonetDB with the default port 50000.
CREATE EXTENSION monetdb_fdw;
CREATE SERVER foreign_server FOREIGN DATA WRAPPER monetdb_fdw
OPTIONS (host '127.0.0.1', port '50000', dbname 'test');
CREATE USER MAPPING FOR CURRENT_USER SERVER foreign_server OPTIONS (user 'monetdb', password 'monetdb');
SELECT monetdb_execute('foreign_server', $$DROP USER test_u$$);
ERROR:  [MonetDB ERROR] DROP USER: no such user role 'test_u'

SELECT monetdb_execute('foreign_server', $$DROP SCHEMA test_u$$);
ERROR:  [MonetDB ERROR] DROP SCHEMA: name test_u does not exist

SELECT monetdb_execute('foreign_server', $$CREATE USER "test_u" WITH PASSWORD 'test_u' NAME 'test_user' SCHEMA "sys"$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$CREATE SCHEMA IF NOT EXISTS "test_u" AUTHORIZATION "test_u"$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$ALTER USER "test_u" SET SCHEMA "test_u"$$);
 monetdb_execute 
-----------------
 
(1 row)

DROP USER MAPPING FOR CURRENT_USER SERVER foreign_server;
CREATE USER MAPPING FOR CURRENT_USER SERVER foreign_server OPTIONS (user 'test_u', password 'test_u');
SELECT monetdb_execute('foreign_server', $$CREATE TABLE emp( name VARCHAR(20), age INTEGER)$$);
 monetdb_execute 
-----------------
 
(1 row)

CREATE FOREIGN TABLE emp(
        name VARCHAR(20),
        age INTEGER
)
SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'emp');
\des
             List of foreign servers
      Name      |  Owner   | Foreign-data wrapper 
----------------+----------+----------------------
 foreign_server | postgres | monetdb_fdw
(1 row)

\d+ emp
                                              Foreign table "public.emp"
 Column |         Type          | Collation | Nullable | Default | FDW options | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+---------+-------------+----------+--------------+-------------
 name   | character varying(20) |           |          |         |             | extended |              | 
 age    | integer               |           |          |         |             | plain    |              | 
Server: foreign_server
FDW options: (schema_name 'test_u', table_name 'emp')

-- test insert 
INSERT INTO emp VALUES('John', 23);
INSERT INTO emp VALUES('Mary', 22);
-- test select
SELECT * FROM emp;
 name | age 
------+-----
 John |  23
 Mary |  22
(2 rows)

SELECT monetdb_execute('foreign_server', $$SELECT * FROM emp$$);
INFO:  
name,age
[ "John",	23	]
[ "Mary",	22	]

 monetdb_execute 
-----------------
 
(1 row)

-- test explain
-- EXPLAIN (COSTS OFF) SELECT * FROM emp;
EXPLAIN (COSTS OFF) INSERT INTO emp VALUES('Mary test', 21);
                              QUERY PLAN                              
----------------------------------------------------------------------
 Insert on emp
   MonetDB statement: INSERT INTO test_u.emp(name, age) VALUES (?, ?)
   ->  Result
(3 rows)

-- test truncate
TRUNCATE emp;
SELECT * FROM emp;
 name | age 
------+-----
(0 rows)

INSERT INTO emp VALUES('John', 23);
INSERT INTO emp VALUES('Mary', 22);
TRUNCATE TABLE emp;
SELECT * FROM emp;
 name | age 
------+-----
(0 rows)

SELECT monetdb_execute('foreign_server', $$CREATE TABLE delete_emp(name VARCHAR(20) PRIMARY KEY, age INTEGER)$$);
 monetdb_execute 
-----------------
 
(1 row)

CREATE FOREIGN TABLE delete_emp(
        name VARCHAR(20),
        age INTEGER
)
SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'delete_emp');
INSERT INTO delete_emp VALUES('John', 23);
INSERT INTO delete_emp VALUES('Mary', 22);
SELECT * FROM delete_emp;
 name | age 
------+-----
 John |  23
 Mary |  22
(2 rows)

INSERT INTO delete_emp VALUES('Mary', 22); -- error
ERROR:  [MonetDB ERROR] INSERT INTO: PRIMARY KEY constraint 'delete_emp.delete_emp_name_pkey' violated

INSERT INTO delete_emp VALUES('Mary2', 22);
SELECT * FROM delete_emp;
 name  | age 
-------+-----
 John  |  23
 Mary  |  22
 Mary2 |  22
(3 rows)

-- test delete
DELETE FROM delete_emp WHERE name = 'John'; -- error, need set key
ERROR:  no primary key column specified for foreign MonetDB table
DETAIL:  For UPDATE or DELETE, at least one foreign table column must be marked as primary key column.
ALTER FOREIGN TABLE delete_emp ALTER name OPTIONS (ADD key 'true');
DELETE FROM delete_emp WHERE name = 'John';
SELECT * FROM delete_emp;
 name  | age 
-------+-----
 Mary  |  22
 Mary2 |  22
(2 rows)

DELETE FROM delete_emp WHERE age = 22;
SELECT * FROM delete_emp;
 name | age 
------+-----
(0 rows)

set client_min_messages = 'debug2';
INSERT INTO emp VALUES('John', 23);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.emp(name, age) VALUES (?, ?)
DEBUG:  monetdb_fdw bind value0: John
DEBUG:  monetdb_fdw bind value1: 23
INSERT INTO emp VALUES('Mary', 22);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.emp(name, age) VALUES (?, ?)
DEBUG:  monetdb_fdw bind value0: Mary
DEBUG:  monetdb_fdw bind value1: 22
SELECT * FROM emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.emp
 name | age 
------+-----
 John |  23
 Mary |  22
(2 rows)

INSERT INTO delete_emp VALUES('John', 23);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.delete_emp(name, age) VALUES (?, ?)
DEBUG:  monetdb_fdw bind value0: John
DEBUG:  monetdb_fdw bind value1: 23
INSERT INTO delete_emp VALUES('Mary', 22);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.delete_emp(name, age) VALUES (?, ?)
DEBUG:  monetdb_fdw bind value0: Mary
DEBUG:  monetdb_fdw bind value1: 22
SELECT * FROM delete_emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp
 name | age 
------+-----
 John |  23
 Mary |  22
(2 rows)

-- test update
UPDATE emp SET name = 'Mary2' WHERE name = 'Mary'; -- error
ERROR:  no primary key column specified for foreign MonetDB table
DETAIL:  For UPDATE or DELETE, at least one foreign table column must be marked as primary key column.
UPDATE delete_emp SET name = 'Mary2' WHERE name = 'Mary'; -- ok
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp WHERE ((name = 'Mary')) /* FOR UPDATE */
DEBUG:  monetdb_fdw remote prepare query is: UPDATE test_u.delete_emp SET name = ? WHERE name = ?
DEBUG:  monetdb_fdw bind value0: Mary2
DEBUG:  monetdb_fdw bind value1: Mary
SELECT * FROM delete_emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp
 name  | age 
-------+-----
 John  |  23
 Mary2 |  22
(2 rows)

UPDATE delete_emp SET name = 'John2' WHERE age = 23; 
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp WHERE ((age = 23)) /* FOR UPDATE */
DEBUG:  monetdb_fdw remote prepare query is: UPDATE test_u.delete_emp SET name = ? WHERE name = ?
DEBUG:  monetdb_fdw bind value0: John2
DEBUG:  monetdb_fdw bind value1: John
SELECT * FROM delete_emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp
 name  | age 
-------+-----
 John2 |  23
 Mary2 |  22
(2 rows)

-- test returning
INSERT INTO delete_emp VALUES('John', 23) RETURNING *;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.delete_emp(name, age) VALUES (?, ?) RETURNING name, age
DEBUG:  monetdb_fdw bind value0: John
DEBUG:  monetdb_fdw bind value1: 23
 name | age 
------+-----
 John |  23
(1 row)

DELETE FROM delete_emp WHERE name = 'John' RETURNING *;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name FROM test_u.delete_emp WHERE ((name = 'John')) /* FOR UPDATE */
DEBUG:  monetdb_fdw remote prepare query is: DELETE FROM test_u.delete_emp WHERE name = ? RETURNING name, age
DEBUG:  monetdb_fdw bind value0: John
 name | age 
------+-----
 John |  23
(1 row)

SELECT * FROM delete_emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp
 name  | age 
-------+-----
 John2 |  23
 Mary2 |  22
(2 rows)

UPDATE delete_emp SET name = 'Mary' WHERE name = 'Mary2' RETURNING *; -- error, MonetDB "UPDATE ... RETURNING" has bug
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp WHERE ((name = 'Mary2')) /* FOR UPDATE */
DEBUG:  monetdb_fdw remote prepare query is: UPDATE test_u.delete_emp SET name = ? WHERE name = ? RETURNING name, age
DEBUG:  monetdb_fdw bind value0: Mary
DEBUG:  monetdb_fdw bind value1: Mary2
ERROR:  [MonetDB ERROR] (null)
SELECT * FROM delete_emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp
 name  | age 
-------+-----
 John2 |  23
 Mary2 |  22
(2 rows)

DROP FOREIGN TABLE emp;
DEBUG:  drop auto-cascades to type emp
DEBUG:  drop auto-cascades to type emp[]
DROP FOREIGN TABLE delete_emp;
DEBUG:  drop auto-cascades to type delete_emp
DEBUG:  drop auto-cascades to type delete_emp[]
SELECT monetdb_execute('foreign_server', $$CREATE TABLE test_default(name VARCHAR(20) default 'zm', age INTEGER)$$);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: CREATE TABLE test_default(name VARCHAR(20) default 'zm', age INTEGER)
 monetdb_execute 
-----------------
 
(1 row)

-- test IMPORT FOREIGN SCHEMA
IMPORT FOREIGN SCHEMA "test_u" from server foreign_server into public;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT 1 FROM sys.schemas WHERE name = 'test_u'
DEBUG:  monetdb_fdw remote query is: 
SELECT t.name as table_name, 
  c.name as col_name, 
  sys.sql_datatype(c.type, c.type_digits, c.type_scale, false, false) as type, 
  CASE WHEN c."null" THEN 'false' ELSE 'true' END as expr, 
  sys.ifthenelse(c."default" IS NOT NULL, c."default", NULL) as default_expr, 
 (SELECT true FROM sys.objects kc, sys.keys k where kc.id = k.id and k.table_id = t.id and kc.name = c.name AND k.type = 0) AS pk, 
 c.number as attnum 
 FROM sys.tables t, sys.schemas s, sys.columns c  
 WHERE t.schema_id = s.id 
  AND t.type = 0 
  AND c.table_id = t.id 
  AND s.name = 'test_u' ORDER BY table_name, attnum
DEBUG:  postgres execute query is: 
CREATE FOREIGN TABLE delete_emp (
  name CHARACTER VARYING(20) OPTIONS (key 'true')  NOT NULL,
  age INTEGER
) SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'delete_emp');
DEBUG:  postgres execute query is: 
CREATE FOREIGN TABLE emp (
  name CHARACTER VARYING(20),
  age INTEGER
) SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'emp');
DEBUG:  postgres execute query is: 
CREATE FOREIGN TABLE test_default (
  name CHARACTER VARYING(20) DEFAULT 'zm',
  age INTEGER
) SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'test_default');
\dE
                List of relations
 Schema |     Name     |     Type      |  Owner   
--------+--------------+---------------+----------
 public | delete_emp   | foreign table | postgres
 public | emp          | foreign table | postgres
 public | test_default | foreign table | postgres
(3 rows)

SELECT * FROM emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.emp
 name | age 
------+-----
 John |  23
 Mary |  22
(2 rows)

SELECT * FROM delete_emp;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.delete_emp
 name  | age 
-------+-----
 John2 |  23
 Mary2 |  22
(2 rows)

EXPLAIN VERBOSE INSERT INTO test_default(age) values(22);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Insert on public.test_default  (cost=0.00..0.01 rows=0 width=0)
   MonetDB statement: INSERT INTO test_u.test_default(name, age) VALUES (?, ?)
   ->  Result  (cost=0.00..0.01 rows=1 width=62)
         Output: 'zm'::character varying(20), 22
(4 rows)

INSERT INTO test_default(age) values(22);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.test_default(name, age) VALUES (?, ?)
DEBUG:  monetdb_fdw bind value0: zm
DEBUG:  monetdb_fdw bind value1: 22
SELECT * FROM test_default;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.test_default
 name | age 
------+-----
 zm   |  22
(1 row)

DROP FOREIGN TABLE test_default;
DEBUG:  drop auto-cascades to type test_default
DEBUG:  drop auto-cascades to type test_default[]
DEBUG:  drop auto-cascades to default value for column name of foreign table test_default
-- test IMPORT FOREIGN SCHEMA ... LIMIT TO
IMPORT FOREIGN SCHEMA "test_u" limit to (test_default) from server foreign_server into public;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT 1 FROM sys.schemas WHERE name = 'test_u'
DEBUG:  monetdb_fdw remote query is: 
SELECT t.name as table_name, 
  c.name as col_name, 
  sys.sql_datatype(c.type, c.type_digits, c.type_scale, false, false) as type, 
  CASE WHEN c."null" THEN 'false' ELSE 'true' END as expr, 
  sys.ifthenelse(c."default" IS NOT NULL, c."default", NULL) as default_expr, 
 (SELECT true FROM sys.objects kc, sys.keys k where kc.id = k.id and k.table_id = t.id and kc.name = c.name AND k.type = 0) AS pk, 
 c.number as attnum 
 FROM sys.tables t, sys.schemas s, sys.columns c  
 WHERE t.schema_id = s.id 
  AND t.type = 0 
  AND c.table_id = t.id 
  AND s.name = 'test_u' AND t.name IN ('test_default') ORDER BY table_name, attnum
DEBUG:  postgres execute query is: 
CREATE FOREIGN TABLE test_default (
  name CHARACTER VARYING(20) DEFAULT 'zm',
  age INTEGER
) SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'test_default');
\d+ test_default
                                                  Foreign table "public.test_default"
 Column |         Type          | Collation | Nullable |         Default         | FDW options | Storage  | Stats target | Description 
--------+-----------------------+-----------+----------+-------------------------+-------------+----------+--------------+-------------
 name   | character varying(20) |           |          | 'zm'::character varying |             | extended |              | 
 age    | integer               |           |          |                         |             | plain    |              | 
Server: foreign_server
FDW options: (schema_name 'test_u', table_name 'test_default')

SELECT * FROM test_default;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT name, age FROM test_u.test_default
 name | age 
------+-----
 zm   |  22
(1 row)

-- test the joint primary key 
SELECT monetdb_execute('foreign_server', $$CREATE TABLE orders (
    order_id INTEGER,
    product_id INTEGER,
    customer_email VARCHAR(100),
    order_date DATE,
    quantity INTEGER,
    CONSTRAINT pk_orders PRIMARY KEY (order_id, product_id)
)$$);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: CREATE TABLE orders (
    order_id INTEGER,
    product_id INTEGER,
    customer_email VARCHAR(100),
    order_date DATE,
    quantity INTEGER,
    CONSTRAINT pk_orders PRIMARY KEY (order_id, product_id)
)
 monetdb_execute 
-----------------
 
(1 row)

IMPORT FOREIGN SCHEMA "test_u" limit to (orders) from server foreign_server into public;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT 1 FROM sys.schemas WHERE name = 'test_u'
DEBUG:  monetdb_fdw remote query is: 
SELECT t.name as table_name, 
  c.name as col_name, 
  sys.sql_datatype(c.type, c.type_digits, c.type_scale, false, false) as type, 
  CASE WHEN c."null" THEN 'false' ELSE 'true' END as expr, 
  sys.ifthenelse(c."default" IS NOT NULL, c."default", NULL) as default_expr, 
 (SELECT true FROM sys.objects kc, sys.keys k where kc.id = k.id and k.table_id = t.id and kc.name = c.name AND k.type = 0) AS pk, 
 c.number as attnum 
 FROM sys.tables t, sys.schemas s, sys.columns c  
 WHERE t.schema_id = s.id 
  AND t.type = 0 
  AND c.table_id = t.id 
  AND s.name = 'test_u' AND t.name IN ('orders') ORDER BY table_name, attnum
DEBUG:  postgres execute query is: 
CREATE FOREIGN TABLE orders (
  order_id INTEGER OPTIONS (key 'true')  NOT NULL,
  product_id INTEGER OPTIONS (key 'true')  NOT NULL,
  customer_email CHARACTER VARYING(100),
  order_date DATE,
  quantity INTEGER
) SERVER foreign_server
OPTIONS (schema_name 'test_u', table_name 'orders');
\dE+ orders
                                List of relations
 Schema |  Name  |     Type      |  Owner   | Persistence |  Size   | Description 
--------+--------+---------------+----------+-------------+---------+-------------
 public | orders | foreign table | postgres | permanent   | 0 bytes | 
(1 row)

\d+ orders
                                                  Foreign table "public.orders"
     Column     |          Type          | Collation | Nullable | Default | FDW options  | Storage  | Stats target | Description 
----------------+------------------------+-----------+----------+---------+--------------+----------+--------------+-------------
 order_id       | integer                |           | not null |         | (key 'true') | plain    |              | 
 product_id     | integer                |           | not null |         | (key 'true') | plain    |              | 
 customer_email | character varying(100) |           |          |         |              | extended |              | 
 order_date     | date                   |           |          |         |              | plain    |              | 
 quantity       | integer                |           |          |         |              | plain    |              | 
Server: foreign_server
FDW options: (schema_name 'test_u', table_name 'orders')

INSERT INTO orders (order_id, product_id, customer_email, order_date, quantity)
VALUES (1, 101, 'john.doe@example.com', '2025-01-01', 5);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.orders(order_id, product_id, customer_email, order_date, quantity) VALUES (?, ?, ?, ?, ?)
DEBUG:  monetdb_fdw bind value0: 1
DEBUG:  monetdb_fdw bind value1: 101
DEBUG:  monetdb_fdw bind value2: john.doe@example.com
DEBUG:  monetdb_fdw bind value3: 2025-01-01
DEBUG:  monetdb_fdw bind value4: 5
INSERT INTO orders (order_id, product_id, customer_email, order_date, quantity)
VALUES (2, 102, 'jane.smith@example.com', '2025-02-15', 3);
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote prepare query is: INSERT INTO test_u.orders(order_id, product_id, customer_email, order_date, quantity) VALUES (?, ?, ?, ?, ?)
DEBUG:  monetdb_fdw bind value0: 2
DEBUG:  monetdb_fdw bind value1: 102
DEBUG:  monetdb_fdw bind value2: jane.smith@example.com
DEBUG:  monetdb_fdw bind value3: 2025-02-15
DEBUG:  monetdb_fdw bind value4: 3
UPDATE orders
SET quantity = 10
WHERE order_id = 1 AND product_id = 101;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT order_id, product_id, customer_email, order_date, quantity FROM test_u.orders WHERE ((order_id = 1)) AND ((product_id = 101)) /* FOR UPDATE */
DEBUG:  monetdb_fdw remote prepare query is: UPDATE test_u.orders SET quantity = ? WHERE order_id = ? AND product_id = ?
DEBUG:  monetdb_fdw bind value0: 10
DEBUG:  monetdb_fdw bind value1: 1
DEBUG:  monetdb_fdw bind value2: 101
DELETE FROM orders
WHERE order_id = 2 AND product_id = 102;
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT order_id, product_id FROM test_u.orders WHERE ((order_id = 2)) AND ((product_id = 102)) /* FOR UPDATE */
DEBUG:  monetdb_fdw remote prepare query is: DELETE FROM test_u.orders WHERE order_id = ? AND product_id = ?
DEBUG:  monetdb_fdw bind value0: 2
DEBUG:  monetdb_fdw bind value1: 102
SELECT * FROM orders; 
DEBUG:  monetdb: host: 127.0.0.1 port: 50000 user: test_u password: test_u dbname: test
DEBUG:  monetdb_fdw remote query is: SELECT order_id, product_id, customer_email, order_date, quantity FROM test_u.orders
 order_id | product_id |    customer_email    | order_date | quantity 
----------+------------+----------------------+------------+----------
        1 |        101 | john.doe@example.com | 01-01-2025 |       10
(1 row)

set client_min_messages = 'INFO';
DROP FOREIGN TABLE emp;
DROP FOREIGN TABLE delete_emp;
DROP FOREIGN TABLE test_default;
DROP FOREIGN TABLE orders;
SELECT monetdb_execute('foreign_server', $$DROP TABLE orders$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$DROP TABLE test_default$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$DROP TABLE delete_emp$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$DROP TABLE emp$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$ALTER USER test_u SET SCHEMA sys$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$DROP SCHEMA test_u$$);
 monetdb_execute 
-----------------
 
(1 row)

SELECT monetdb_execute('foreign_server', $$DROP USER test_u$$);
 monetdb_execute 
-----------------
 
(1 row)

